/**
 * Build.io API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BuildIoApiV1);
  }
}(this, function(expect, BuildIoApiV1) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new BuildIoApiV1.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('apiV1AppsIdBuildsPost', function() {
      it('should call apiV1AppsIdBuildsPost successfully', function(done) {
        //uncomment below and update the code to test apiV1AppsIdBuildsPost
        //instance.apiV1AppsIdBuildsPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiV1MeGet', function() {
      it('should call apiV1MeGet successfully', function(done) {
        //uncomment below and update the code to test apiV1MeGet
        //instance.apiV1MeGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiV1OidcLoginGet', function() {
      it('should call apiV1OidcLoginGet successfully', function(done) {
        //uncomment below and update the code to test apiV1OidcLoginGet
        //instance.apiV1OidcLoginGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('app', function() {
      it('should call app successfully', function(done) {
        //uncomment below and update the code to test app
        //instance.app(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apps', function() {
      it('should call apps successfully', function(done) {
        //uncomment below and update the code to test apps
        //instance.apps(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('configVars', function() {
      it('should call configVars successfully', function(done) {
        //uncomment below and update the code to test configVars
        //instance.configVars(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createApp', function() {
      it('should call createApp successfully', function(done) {
        //uncomment below and update the code to test createApp
        //instance.createApp(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createNamespace', function() {
      it('should call createNamespace successfully', function(done) {
        //uncomment below and update the code to test createNamespace
        //instance.createNamespace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteConfigVar', function() {
      it('should call deleteConfigVar successfully', function(done) {
        //uncomment below and update the code to test deleteConfigVar
        //instance.deleteConfigVar(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteNamespace', function() {
      it('should call deleteNamespace successfully', function(done) {
        //uncomment below and update the code to test deleteNamespace
        //instance.deleteNamespace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listDynos', function() {
      it('should call listDynos successfully', function(done) {
        //uncomment below and update the code to test listDynos
        //instance.listDynos(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('namespace', function() {
      it('should call namespace successfully', function(done) {
        //uncomment below and update the code to test namespace
        //instance.namespace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('namespaces', function() {
      it('should call namespaces successfully', function(done) {
        //uncomment below and update the code to test namespaces
        //instance.namespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('restartAllDynos', function() {
      it('should call restartAllDynos successfully', function(done) {
        //uncomment below and update the code to test restartAllDynos
        //instance.restartAllDynos(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('restartDynos', function() {
      it('should call restartDynos successfully', function(done) {
        //uncomment below and update the code to test restartDynos
        //instance.restartDynos(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setConfigVars', function() {
      it('should call setConfigVars successfully', function(done) {
        //uncomment below and update the code to test setConfigVars
        //instance.setConfigVars(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('team', function() {
      it('should call team successfully', function(done) {
        //uncomment below and update the code to test team
        //instance.team(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('teams', function() {
      it('should call teams successfully', function(done) {
        //uncomment below and update the code to test teams
        //instance.teams(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
