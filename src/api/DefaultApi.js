/**
 * Build.io API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiV1AppsIdBuildsPostRequest from '../model/ApiV1AppsIdBuildsPostRequest';
import ApiV1MeGet200Response from '../model/ApiV1MeGet200Response';
import ApiV1OidcLoginGet200Response from '../model/ApiV1OidcLoginGet200Response';
import App from '../model/App';
import CreateAppRequest from '../model/CreateAppRequest';
import CreateNamespaceRequest from '../model/CreateNamespaceRequest';
import Dyno from '../model/Dyno';
import Namespace from '../model/Namespace';
import Team from '../model/Team';

/**
* Default service.
* @module api/DefaultApi
* @version v1
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * create build
     * @param {String} id app id or name
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiV1AppsIdBuildsPostRequest} [apiV1AppsIdBuildsPostRequest] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    apiV1AppsIdBuildsPostWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['apiV1AppsIdBuildsPostRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1AppsIdBuildsPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer', 'oauth2'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/apps/{id}/builds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * create build
     * @param {String} id app id or name
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiV1AppsIdBuildsPostRequest} opts.apiV1AppsIdBuildsPostRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    apiV1AppsIdBuildsPost(id, opts) {
      return this.apiV1AppsIdBuildsPostWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiV1MeGet200Response} and HTTP response
     */
    apiV1MeGetWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiV1MeGet200Response;
      return this.apiClient.callApi(
        '/api/v1/me', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiV1MeGet200Response}
     */
    apiV1MeGet() {
      return this.apiV1MeGetWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * kubernetes oidc-login
     * @param {Object} opts Optional parameters
     * @param {String} [region] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiV1OidcLoginGet200Response} and HTTP response
     */
    apiV1OidcLoginGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'region': opts['region']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'bearer', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiV1OidcLoginGet200Response;
      return this.apiClient.callApi(
        '/api/v1/oidc-login', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * kubernetes oidc-login
     * @param {Object} opts Optional parameters
     * @param {String} opts.region 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiV1OidcLoginGet200Response}
     */
    apiV1OidcLoginGet(opts) {
      return this.apiV1OidcLoginGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * show app
     * @param {String} id app id or name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/App} and HTTP response
     */
    appWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling app");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = App;
      return this.apiClient.callApi(
        '/api/v1/apps/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * show app
     * @param {String} id app id or name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/App}
     */
    app(id) {
      return this.appWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * list apps
     * List all apps
     * @param {Object} opts Optional parameters
     * @param {String} [teamId] team id or name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/App>} and HTTP response
     */
    appsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'team_id': opts['teamId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [App];
      return this.apiClient.callApi(
        '/api/v1/apps', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * list apps
     * List all apps
     * @param {Object} opts Optional parameters
     * @param {String} opts.teamId team id or name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/App>}
     */
    apps(opts) {
      return this.appsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * list all config-vars
     * @param {String} appIdOrName app id or name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    configVarsWithHttpInfo(appIdOrName) {
      let postBody = null;
      // verify the required parameter 'appIdOrName' is set
      if (appIdOrName === undefined || appIdOrName === null) {
        throw new Error("Missing the required parameter 'appIdOrName' when calling configVars");
      }

      let pathParams = {
        'app_id_or_name': appIdOrName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/api/v1/apps/{app_id_or_name}/config-vars', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * list all config-vars
     * @param {String} appIdOrName app id or name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    configVars(appIdOrName) {
      return this.configVarsWithHttpInfo(appIdOrName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * create app
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateAppRequest} [createAppRequest] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/App} and HTTP response
     */
    createAppWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['createAppRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer', 'oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = App;
      return this.apiClient.callApi(
        '/api/v1/apps', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * create app
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateAppRequest} opts.createAppRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/App}
     */
    createApp(opts) {
      return this.createAppWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * create a namespace
     * Create a namespace
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateNamespaceRequest} [createNamespaceRequest] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Namespace} and HTTP response
     */
    createNamespaceWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['createNamespaceRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer', 'oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Namespace;
      return this.apiClient.callApi(
        '/api/v1/namespaces', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * create a namespace
     * Create a namespace
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateNamespaceRequest} opts.createNamespaceRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Namespace}
     */
    createNamespace(opts) {
      return this.createNamespaceWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * delete config-var
     * Delete a config-var
     * @param {String} appIdOrName app id or name
     * @param {String} key config var key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteConfigVarWithHttpInfo(appIdOrName, key) {
      let postBody = null;
      // verify the required parameter 'appIdOrName' is set
      if (appIdOrName === undefined || appIdOrName === null) {
        throw new Error("Missing the required parameter 'appIdOrName' when calling deleteConfigVar");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteConfigVar");
      }

      let pathParams = {
        'app_id_or_name': appIdOrName,
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer', 'oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/apps/{app_id_or_name}/config-vars/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * delete config-var
     * Delete a config-var
     * @param {String} appIdOrName app id or name
     * @param {String} key config var key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteConfigVar(appIdOrName, key) {
      return this.deleteConfigVarWithHttpInfo(appIdOrName, key)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * delete a namespace
     * Delete a namespace
     * @param {String} namespaceIdOrName Namespace name or ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteNamespaceWithHttpInfo(namespaceIdOrName) {
      let postBody = null;
      // verify the required parameter 'namespaceIdOrName' is set
      if (namespaceIdOrName === undefined || namespaceIdOrName === null) {
        throw new Error("Missing the required parameter 'namespaceIdOrName' when calling deleteNamespace");
      }

      let pathParams = {
        'namespace_id_or_name': namespaceIdOrName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer', 'oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace_id_or_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * delete a namespace
     * Delete a namespace
     * @param {String} namespaceIdOrName Namespace name or ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteNamespace(namespaceIdOrName) {
      return this.deleteNamespaceWithHttpInfo(namespaceIdOrName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * list dynos
     * @param {String} id app id or name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Dyno>} and HTTP response
     */
    listDynosWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listDynos");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Dyno];
      return this.apiClient.callApi(
        '/api/v1/apps/{id}/dynos/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * list dynos
     * @param {String} id app id or name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Dyno>}
     */
    listDynos(id) {
      return this.listDynosWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * show namespace
     * Show a namespace
     * @param {String} namespaceIdOrName Namespace name or ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Namespace} and HTTP response
     */
    namespaceWithHttpInfo(namespaceIdOrName) {
      let postBody = null;
      // verify the required parameter 'namespaceIdOrName' is set
      if (namespaceIdOrName === undefined || namespaceIdOrName === null) {
        throw new Error("Missing the required parameter 'namespaceIdOrName' when calling namespace");
      }

      let pathParams = {
        'namespace_id_or_name': namespaceIdOrName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Namespace;
      return this.apiClient.callApi(
        '/api/v1/namespaces/{namespace_id_or_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * show namespace
     * Show a namespace
     * @param {String} namespaceIdOrName Namespace name or ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Namespace}
     */
    namespace(namespaceIdOrName) {
      return this.namespaceWithHttpInfo(namespaceIdOrName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * list all namespaces
     * List all namespaces
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Namespace>} and HTTP response
     */
    namespacesWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Namespace];
      return this.apiClient.callApi(
        '/api/v1/namespaces', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * list all namespaces
     * List all namespaces
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Namespace>}
     */
    namespaces() {
      return this.namespacesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * restart all dynos
     * @param {String} id app id or name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    restartAllDynosWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling restartAllDynos");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer', 'oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/apps/{id}/dynos', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * restart all dynos
     * @param {String} id app id or name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    restartAllDynos(id) {
      return this.restartAllDynosWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * restart specific dynos
     * @param {String} id app id or name
     * @param {String} dyno dyno name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    restartDynosWithHttpInfo(id, dyno) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling restartDynos");
      }
      // verify the required parameter 'dyno' is set
      if (dyno === undefined || dyno === null) {
        throw new Error("Missing the required parameter 'dyno' when calling restartDynos");
      }

      let pathParams = {
        'id': id,
        'dyno': dyno
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer', 'oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/apps/{id}/dynos/{dyno}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * restart specific dynos
     * @param {String} id app id or name
     * @param {String} dyno dyno name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    restartDynos(id, dyno) {
      return this.restartDynosWithHttpInfo(id, dyno)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * set or update config-vars
     * @param {String} appIdOrName app id or name
     * @param {Object} opts Optional parameters
     * @param {Object.<String, {String: String}>} [requestBody] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setConfigVarsWithHttpInfo(appIdOrName, opts) {
      opts = opts || {};
      let postBody = opts['requestBody'];
      // verify the required parameter 'appIdOrName' is set
      if (appIdOrName === undefined || appIdOrName === null) {
        throw new Error("Missing the required parameter 'appIdOrName' when calling setConfigVars");
      }

      let pathParams = {
        'app_id_or_name': appIdOrName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer', 'oauth2'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/apps/{app_id_or_name}/config-vars', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * set or update config-vars
     * @param {String} appIdOrName app id or name
     * @param {Object} opts Optional parameters
     * @param {Object.<String, {String: String}>} opts.requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setConfigVars(appIdOrName, opts) {
      return this.setConfigVarsWithHttpInfo(appIdOrName, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * show team
     * Show a team
     * @param {String} id Team name or ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Team} and HTTP response
     */
    teamWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling team");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Team;
      return this.apiClient.callApi(
        '/api/v1/teams/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * show team
     * Show a team
     * @param {String} id Team name or ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Team}
     */
    team(id) {
      return this.teamWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * list all teams
     * List all teams
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Team>} and HTTP response
     */
    teamsWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Team];
      return this.apiClient.callApi(
        '/api/v1/teams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * list all teams
     * List all teams
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Team>}
     */
    teams() {
      return this.teamsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
