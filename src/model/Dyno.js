/**
 * Build.io API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Process from './Process';

/**
 * The Dyno model module.
 * @module model/Dyno
 * @version v1
 */
class Dyno {
    /**
     * Constructs a new <code>Dyno</code>.
     * @alias module:model/Dyno
     * @param type {String} 
     * @param quantity {Number} 
     * @param size {String} 
     * @param display {String} 
     * @param processes {Array.<module:model/Process>} 
     */
    constructor(type, quantity, size, display, processes) { 
        
        Dyno.initialize(this, type, quantity, size, display, processes);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type, quantity, size, display, processes) { 
        obj['type'] = type;
        obj['quantity'] = quantity;
        obj['size'] = size;
        obj['display'] = display;
        obj['processes'] = processes;
    }

    /**
     * Constructs a <code>Dyno</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Dyno} obj Optional instance to populate.
     * @return {module:model/Dyno} The populated <code>Dyno</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Dyno();

            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('quantity')) {
                obj['quantity'] = ApiClient.convertToType(data['quantity'], 'Number');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'String');
            }
            if (data.hasOwnProperty('display')) {
                obj['display'] = ApiClient.convertToType(data['display'], 'String');
            }
            if (data.hasOwnProperty('processes')) {
                obj['processes'] = ApiClient.convertToType(data['processes'], [Process]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Dyno</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Dyno</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Dyno.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['size'] && !(typeof data['size'] === 'string' || data['size'] instanceof String)) {
            throw new Error("Expected the field `size` to be a primitive type in the JSON string but got " + data['size']);
        }
        // ensure the json data is a string
        if (data['display'] && !(typeof data['display'] === 'string' || data['display'] instanceof String)) {
            throw new Error("Expected the field `display` to be a primitive type in the JSON string but got " + data['display']);
        }
        if (data['processes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['processes'])) {
                throw new Error("Expected the field `processes` to be an array in the JSON data but got " + data['processes']);
            }
            // validate the optional field `processes` (array)
            for (const item of data['processes']) {
                Process.validateJSON(item);
            };
        }

        return true;
    }


}

Dyno.RequiredProperties = ["type", "quantity", "size", "display", "processes"];

/**
 * @member {String} type
 */
Dyno.prototype['type'] = undefined;

/**
 * @member {Number} quantity
 */
Dyno.prototype['quantity'] = undefined;

/**
 * @member {String} size
 */
Dyno.prototype['size'] = undefined;

/**
 * @member {String} display
 */
Dyno.prototype['display'] = undefined;

/**
 * @member {Array.<module:model/Process>} processes
 */
Dyno.prototype['processes'] = undefined;






export default Dyno;

